{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    ref: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    ref: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    ref: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n  if (id === undefined) {\n    return {\n      getRootProps: function () {\n        let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n          role: 'menuitem'\n        });\n      },\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      ref: handleRef\n    };\n  }\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\n      role: 'menuitem',\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    ref: handleRef\n  };\n}","map":{"version":3,"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useButton","useListItem","useCompoundItem","useMenuItem","params","disabled","id","idParam","ref","externalRef","label","itemRef","useRef","itemMetadata","useMemo","getRootProps","getListRootProps","highlighted","listItemRefHandler","item","index","totalItemCount","getButtonProps","focusVisible","buttonRefHandler","focusableWhenDisabled","handleRef","useDebugValue","undefined","otherHandlers","arguments","length","role","resolvedButtonProps","resolvedMenuItemProps"],"sources":["/Users/denizdemirtas/Desktop/Decal/decal-project/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n\n/**\n *\n * Demos:\n *\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\n */\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    ref: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    ref: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    ref: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  });\n\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n  if (id === undefined) {\n    return {\n      getRootProps: (otherHandlers = {}) => _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n        role: 'menuitem'\n      }),\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      ref: handleRef\n    };\n  }\n  const getRootProps = (otherHandlers = {}) => {\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\n      role: 'menuitem',\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    ref: handleRef\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}